@page "/updateangajat"
@page "/updateangajat/{EmployeeID:int}"
@using Licenta.Models
@using Licenta.Services
@using System.Data
@using System.Diagnostics
@using Licenta.Components
@inject DepartmentServices _departmentServices
@inject JobServices _jobServices
@inject EmployeeServices _employeeServices
@inject EmployeeProjectServices _employeeProjectServices
@inject ProjectServices _projectServices
@inject IDialogService DialogAlert
@inject NavigationManager navManager
@inject NotificationService notification


<div class="container container-fluid align-items-center justify-content-center">
    <div class="row">
        <div class="col justify-content-center" >
            <h3 style="text-align:center;">Editeaza informatii angajat</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-2" >
        </div>
        <div class="col-8 d-flex align-items-center" >
            <div class="date justify-content-center align-items-center" style="left:50%">
                <form class="mt-3" style="width:100%; margin-left:48%">
                    <div class="form-group">
                        <label for="nume">Nume</label>
                        <input @bind-value="@employee.FirstName"  type="text" class="form-control" id="nume" aria-describedby="emailHelp" placeholder="Nume">

                    </div>
                    <div class="form-group mt-2">
                        <label for="prenume">Prenume</label>
                        <input @bind-value="@employee.LastName" type="text" class="form-control" id="prenume" placeholder="Prenume">
                    </div>
                    <div class="form-group mt-2">
                        <label for="exampleFormControlSelect1">Departament</label>
                        <select class="form-control" id="exampleFormControlSelect1" @onchange="DepartmentHandler">
                            @if (departmentList == null)
                            {
                                <div class="spinner">
                                </div>
                            }
                            else
                            {
                                foreach (DepartmentModel dep in departmentList)
                                {
                                    if(dep.DepartmentID == employee.DepartmentID)
                                    {
                                        <option selected value="@dep.DepartmentID">@dep.DepartmentName</option>
                                    }
                                    else
                                    {
                                        <option value="@dep.DepartmentID">@dep.DepartmentName</option>
                                    }

                                }
                            }
                        </select>
                    </div>
                    <div class="form-group mt-2">
                        <label for="exampleFormControlSelect1">Job</label>
                        <select class="form-control" id="exampleFormControlSelect1" @onchange="JobHandler">
                            @if (jobList == null)
                            {
                                <div class="spinner">
                                </div>
                            }
                            else
                            {
                                foreach (JobModel job in jobList)
                                {
                                    if (job.JobID == employee.JobID)
                                    {
                                        <option selected value="@job.JobID">@job.JobTitle</option>

                                    }
                                    else
                                    {
                                        <option value="@job.JobID">@job.JobTitle</option>
                                    }
                                }
                            }
                        </select>
                    </div>
                    <div class="form-group mt-2">
                        <label for="salar">Salariu brut</label>
                        <input @bind-value="@employee.Salary" type="text" class="form-control" id="salar" placeholder="$$$$$">
                    </div>


                    <div class="mb-3 mt-2 form-group">
                        <label for="birthdate">Data nasterii</label>
                        <input class="form-control" name="birthdate"  TValue="@DateTime.Now" type="date" @bind-value="@employee.BirthDate" @bind-value:event="oninput" />
                    </div>
                    <div class="mb-3 mt-2 form-group">
                        <label for="hiredate">Data angajarii</label>
                        <input class="form-control" name="hiredate"  TValue="DateTime" type="date" @bind-value="@employee.HireDate" @bind-value:event="oninput" />
                    </div>
                    <div class="mb-3 mt-2 form-group">
                        
                        @if (employeeProjectsList == null || projectList == null)
                        {
                            <p>Loading</p>
                        }
                        else
                        {
                            @for (int i = 0; i < employeeProjectsList.Distinct().Count(); i++)
                            {
                                int currentIndex = i;
                                <label for="proiect">Proiect @i</label>
                                <div style="display:flex;">
                                    
                                    <select id="proiect" class="form-control" @onchange="@(e => ProjectHandler(e, currentIndex))">
                                    
                                        @foreach (var item in projectList)
                                        {
                                            //Debug.WriteLine($"project counter {projectCounter}");
                                            if (item.ProjectID == employeeProjectsList[i].ProjectId)
                                            {
                                                <option selected value="@item.ProjectID">@item.ProjectID / @item.ProjectName</option>
                                                selectedValues.Add(item.ProjectID);

                                                //Debug.WriteLine($"id item {i}: {item.ProjectID}");
                                                //Debug.WriteLine($"{employeeProjectsList[i].ProjectId} / {item.ProjectName}");
                                            }
                                            else if (employeeProjectsList.Select(x => x.ProjectId).Contains(item.ProjectID))
                                            {
                                                <option disabled value="@item.ProjectID">@item.ProjectID / @item.ProjectName</option>
                                            }
                                            else
                                            {
                                                <option value="@item.ProjectID">@item.ProjectID / @item.ProjectName</option>
                                            }
                                        }
                                    </select>
                                    <RadzenButton  Icon="delete" Click=@(() => DeleteProject(currentIndex)) ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Style="margin-left: 10px; width:100px;"></RadzenButton>
                                </div>
                                <br />
                            }
                            <div style="display: @(divHidden ? "none" : "block");" class="mb-3">
                                <label for="adauga-proiect">Adauga proiect</label>
                                <select name="adauga-proiect" class="form-control" @onchange="@(e => AddProjectToEmployee(e))">
                                    <option selected value="0">Alege un proiect</option>
                                    @foreach (var item in projectList)
                                    {
                                        if (employeeProjectsList.Select(x => x.ProjectId).Contains(item.ProjectID))
                                        {
                                            <option disabled value="@item.ProjectID">@item.ProjectID / @item.ProjectName</option>
                                        }
                                        else
                                        {
                                            <option value="@item.ProjectID">@item.ProjectID / @item.ProjectName</option>

                                        }

                                    }
                                </select>
                            </div>
                            <RadzenCard class="mt-3 mb-3">
                                @if (!String.IsNullOrEmpty(cvPath))
                                {
                                    <h6>Modifica CV</h6>
                                }
                                else
                                {
                                    <h6>Adauga CV</h6>
                                }

                                <InputFile OnChange="HandleFileChange" accept=".pdf" />
                            </RadzenCard>
                            <div>
                                <RadzenButton Click=@ToggleVisibility Text="Adauga proiect" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary"></RadzenButton>
                                <RadzenButton Click=@UpdateEmployee Text="Salveaza modificari" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Style="font-family:Arial; margin-left:30px;" Icon="save"></RadzenButton>
                            </div>
                            
                            
                            

                        }
                        
                    </div>



                    
                </form>
            </div>
        </div>
        <div class="col-2" >
        </div>
    </div>
    <div class="row">
    </div>
</div>



@code {
    [Parameter]
    public int EmployeeID { get; set; }
    [Parameter] public int Time { get; set; } = 5;
    EmployeeModel employee = new EmployeeModel();
    List<DepartmentModel> departmentList;
    List<JobModel> jobList;
    IEnumerable<ProjectModel> projectList;
    List<EmployeeProjectModel> employeeProjectsList;
    EmployeeProjectModel empProjOld = new EmployeeProjectModel();
    EmployeeProjectModel empProjNew = new EmployeeProjectModel();
    List<int> selectedValues = new List<int>();
    bool btnHidden = false;
    bool divHidden = true;
    string cvPath;
    IBrowserFile cvFile;
    bool shouldCopyPdf = false;




    protected override async Task OnInitializedAsync()
    {
        employee.DepartmentID = 1;
        employee.JobID = 1;
        departmentList = await _departmentServices.GetAllDepartments();
        jobList = await _jobServices.GetAllJobs();
        employee = await _employeeServices.GetEmployeeById(EmployeeID);
        //Debug.WriteLine($"emp id {employee.EmployeeID} / {EmployeeID}");
        employeeProjectsList = await this._employeeProjectServices.GetEmployeeProjectsById(EmployeeID);
        projectList = await this._projectServices.GetAllProjects();
        cvPath = employee.CVPath;
        this.StateHasChanged();
    }

    async Task PutTaskDelay()
    {
        await Task.Delay(2000);
    }



    public async void UpdateEmployee()
    {
        if (employee.FirstName == null)
        {
            notification.Notify(NotificationSeverity.Error, "Eroare", $"Trebuie sa completati numele angajatului", 3000);
            return;
        }

        if (employee.LastName == null)
        {
            notification.Notify(NotificationSeverity.Error, "Eroare", $"Trebuie sa completati prenumele angajatului", 3000);
            return;
        }

        if (employee.Salary == 0)
        {
            notification.Notify(NotificationSeverity.Error, "Eroare!", "Trebuie sa introduceti salariul!", 3000);
            return;
        }

        if (employee.HireDate.Date == employee.BirthDate.Date)
        {
            notification.Notify(NotificationSeverity.Error, "Eroare!", "Data de nastere nu poate sa fie aceeasi ca data de angajare", 3000);
            return;
        }

        if (employee.BirthDate.Date > DateTime.Now.Date)
        {
            notification.Notify(NotificationSeverity.Error, "Eroare!", "Data de nastere introdusa nu poate sa fie din viitor!", 3000);
            return;
        }

        if (employee.HireDate.Date > DateTime.Now.Date)
        {
            notification.Notify(NotificationSeverity.Error, "Eroare!", "Data de angajare introdusa nu poate sa fie din viitor!", 3000);
            return;
        }

        if (!String.IsNullOrEmpty(cvPath))
        {
            shouldCopyPdf = true;
        }
        await CopyPdfFile(cvFile);
        employee.CVPath = cvPath;
        await _employeeServices.UpdateEmployee(employee);
        employeeProjectsList = await this._employeeProjectServices.GetEmployeeProjectsById(EmployeeID);
        notification.Notify(NotificationSeverity.Success, "Succes!", "Modificarile au fost salvate cu succes!", 5000);
        await PutTaskDelay();
        navManager.NavigateTo("/listaemp");

    }


    public async void DepartmentHandler(ChangeEventArgs e)
    {
        employee.DepartmentID = Convert.ToInt32(e.Value);
        await _employeeServices.UpdateEmployee(employee);
        notification.Notify(NotificationSeverity.Success, "Succes!", "Modificarile au fost salvate cu succes!", 5000);
        employeeProjectsList = await this._employeeProjectServices.GetEmployeeProjectsById(EmployeeID);
        this.StateHasChanged();
    }



    public async void JobHandler(ChangeEventArgs e)
    {
        employee.JobID = Convert.ToInt32(e.Value);
        await _employeeServices.UpdateEmployee(employee);
        notification.Notify(NotificationSeverity.Success, "Succes!", "Modificarile au fost salvate cu succes!", 5000);
        jobList = await this._jobServices.GetAllJobs();
        this.StateHasChanged();
    }

    public async void AddProjectToEmployee(ChangeEventArgs e)
    {
        if (Convert.ToInt32(e.Value) == null || Convert.ToInt32(e.Value) < 1)
        {
            Debug.WriteLine("da");
            return;
        }

        EmployeeProjectModel emp = new EmployeeProjectModel();
        emp.EmployeeId = EmployeeID;
        emp.ProjectId = Convert.ToInt32(e.Value);
        Debug.WriteLine($"emp id{emp.EmployeeId} proj id {emp.ProjectId}");
        await this._employeeProjectServices.AddEmployeeProject(emp);
        notification.Notify(NotificationSeverity.Success, "Succes!", "Modificarile au fost salvate cu succes!", 5000);
        employeeProjectsList = await this._employeeProjectServices.GetEmployeeProjectsById(EmployeeID);
        ToggleVisibility();
        this.StateHasChanged();
    }

    public void ReloadPage()
    {
        navManager.NavigateTo($"updateangajat/{EmployeeID}", true);

    }

    public async void ProjectHandler(ChangeEventArgs e, int oldProjectId)
    {
        EmployeeProjectModel epm = new EmployeeProjectModel();
        epm.EmployeeId = EmployeeID;
        epm.ProjectId = Convert.ToInt32(e.Value);
        for (int i = 0; i < employeeProjectsList.Distinct().Count(); i++)
        {
            if (Convert.ToInt32(e.Value) == employeeProjectsList[i].ProjectId)
            {
                await DialogAlert.DisplayConfirm("Eroare!", "Acest angajat lucreaza deja la acest proiect!", "Ok.", "da");
                return;
            }
        }
        await DialogAlert.DisplayConfirm("Atentie!", $"Esti pe cale sa inlocuiesti proiectul {projectList.First(x => x.ProjectID == selectedValues[oldProjectId]).ProjectName} cu proiectul {projectList.First(x => x.ProjectID == Convert.ToInt32(e.Value)).ProjectName} pentru angajatul {employee.LastName} {employee.FirstName}! \n Continui?", "da", "nu");
        await this._employeeProjectServices.UpdateEmployeeProject(EmployeeID, selectedValues[oldProjectId], epm);
        await OnInitializedAsync();
        notification.Notify(NotificationSeverity.Success, "Succes!", "Modificarile au fost salvate cu succes!", 5000);
        projectList = await this._projectServices.GetAllProjects();
        this.StateHasChanged();

    }

    public async void DeleteProject(int index)
    {
        await this._employeeProjectServices.DeleteEmployeeProject(EmployeeID, employeeProjectsList[index].ProjectId);
        notification.Notify(NotificationSeverity.Success, "Succes!", "Modificarile au fost salvate cu succes!", 5000);
        employeeProjectsList = await this._employeeProjectServices.GetEmployeeProjectsById(EmployeeID);
        this.StateHasChanged();
    }

    public void ToggleVisibility()
    {
        btnHidden = !btnHidden;
        divHidden = !divHidden;
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        if (e.File == null)
        {
            notification.Notify(NotificationSeverity.Error, "Eroare!", "Niciun fișier selectat.", 3000);
            Debug.WriteLine("Niciun fișier selectat în HandleFileChange");
            return;
        }

        cvFile = e.File;
        Debug.WriteLine("Fișier selectat");
        if (cvFile.ContentType == "application/pdf")
        {
            await CopyPdfFile(cvFile);
            Debug.WriteLine($"Apel catre CopyPdfFile");
        }
        else
        {
            notification.Notify(NotificationSeverity.Error, "Eroare!", "Fișierul selectat trebuie să fie de tip .PDF!", 3000);
            Debug.WriteLine("Eroare: fișierul selectat nu este PDF");
        }
    }

    private async Task CopyPdfFile(IBrowserFile file)
    {
        if (file == null)
        {
            Debug.WriteLine("Niciun fișier de copiat în CopyPdfFile");
            return;
        }

        var appDataFolder = AppDomain.CurrentDomain.BaseDirectory;
        var folderPath = Path.Combine(appDataFolder, "res", "cv");
        Debug.WriteLine($"Folder path {folderPath}");

        Directory.CreateDirectory(folderPath);

        var fileName = file.Name;
        var filePath = Path.Combine(folderPath, fileName);
        cvPath = filePath;
        Debug.WriteLine($"cvpath {cvPath}");
        if (shouldCopyPdf)
        {
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(fileStream);
                Debug.WriteLine($"Fisier copiat la {filePath}");
            }
        }
    }




}
