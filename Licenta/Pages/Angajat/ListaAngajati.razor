@page "/listaemp"
@using Licenta.Data
@using Licenta.Services
@using Licenta.Models
@using System.Diagnostics
@inject WeatherForecastService ForecastService
@inject EmployeeServices _employeeServices
@inject DepartmentServices _depServices
@inject JobServices _jobServices
@inject IDialogService DialogService
@inject NavigationManager navManager


<h1>Lista angajati</h1>

<br />
<br />

<RadzenButton Text="Adauga angajat" Click=@NavigateAddEmp  Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary"></RadzenButton>
<RadzenTextBox @oninput="@((e) => SearchHandler(e))" Placeholder="Cautare dupa nume sau prenume" Style="width: 15rem; margin-left: 1em; border: 1px solid black;" ></RadzenTextBox>

<br />
<br />

@if (employeeList == null || departmentList == null || jobList == null)
{
	<p><em>Loading...</em></p>
}
else
{
	
	<div class="table-responsive-sm">
		<table class="table table-sm table-striped gap-0">
			<thead>
				<tr>
					<th style="width:8vw; padding: 0 0 0 0;">Nume</th>
					<th style="width:8vw; padding: 0 0 0 0;">Prenume</th>
					<th style="width:8vw; padding: 0 0 0 0;">Varsta</th>
					<th style="width:8vw; padding: 0 0 0 0;">Departament</th>
					<th style="width:8vw; padding: 0 0 0 0;">Rol</th>
					<th style="width:8vw; padding: 0 0 0 0;">Editeaza</th>
					<th style="width:8vw; padding: 0 0 0 0;">Sterge</th>
					<th style="width:8vw; padding: 0 0 0 0;">Detalii</th>

				</tr>
			</thead>
			<tbody>
				@if(!string.IsNullOrEmpty(search))
				{
					@foreach (EmployeeModel emp in filteredEmployeeList)
					{
						string depName = departmentList.Where(x => x.DepartmentID == emp.DepartmentID).Select(d => d.DepartmentName).First();
						string jobTitle = jobList.Where(x => x.JobID == emp.JobID).Select(j => j.JobTitle).First();

						<tr>
							<td>@emp.LastName</td>
							<td>@emp.FirstName</td>
							<td>@emp.Age</td>
							<td>@depName</td>
							<td>@jobTitle</td>
							<td><RadzenButton Text="Edit" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Icon="build" Click="@(()=> UpdateEmployee(emp))"></RadzenButton></td>
							<td><RadzenButton Text="Sterge" Icon="delete" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Click="@(()=> DeleteEmployee(emp))"></RadzenButton></td>
							<td><RadzenButton Text="Detalii" Icon="info" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Default" Click="@(() => AboutEmployee(emp))"></RadzenButton></td>

						</tr>
					}
				}
				else
				{
					@foreach (EmployeeModel emp in employeeList)
					{
						string depName = departmentList.Where(x => x.DepartmentID == emp.DepartmentID).Select(d => d.DepartmentName).First();
						string jobTitle = jobList.Where(x => x.JobID == emp.JobID).Select(j => j.JobTitle).First();

						<tr>
							<td>@emp.LastName</td>
							<td>@emp.FirstName</td>
							<td>@emp.Age</td>
							<td>@depName</td>
							<td>@jobTitle</td>
							<td><RadzenButton Text="Edit" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Icon="build" Click="@(()=> UpdateEmployee(emp))"></RadzenButton></td>
							<td><RadzenButton Text="Sterge" Icon="delete" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Click="@(()=> DeleteEmployee(emp))"></RadzenButton></td>
							<td><RadzenButton Text="Detalii" Icon="info" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Default" Click="@(() => AboutEmployee(emp))"></RadzenButton></td>

						</tr>
					}
				}
			</tbody>
		</table>
	</div>
}



@code {
	//@departmentList.Where(x => x.DepartmentID == emp.DepartmentID).Select(d => d.DepartmentName).First();
	//@jobList.Where(x => x.JobID == emp.JobID).Select(j => j.JobTitle).First();
	bool loaded = false;
	List<EmployeeModel> employeeList;
	List<EmployeeModel> filteredEmployeeList;
	IEnumerable<DepartmentModel> departmentList;
	IEnumerable<JobModel> jobList;
	string search;
	public async void GetAllEmployees()
	{
		employeeList = await this._employeeServices.GetAllEmployees();

	}

	protected override async Task OnInitializedAsync()
	{
		employeeList = await _employeeServices.GetAllEmployees();
		departmentList = await this._depServices.GetAllDepartments();
		jobList = await this._jobServices.GetAllJobs();
		Debug.WriteLine("Liste incarcate!!!");
	}

	public void UpdateEmployee(EmployeeModel e)
	{
		navManager.NavigateTo($"updateangajat/{e.EmployeeID}");
		Debug.WriteLine($"emp id de la index {e.EmployeeID}");
	}

	public void AboutEmployee(EmployeeModel e )
	{
		navManager.NavigateTo($"/detaliiangajat/{e.EmployeeID}");
	}

	public async void DeleteEmployee(EmployeeModel e)
	{
		await _employeeServices.DeleteEmployee(e);
		employeeList = await this._employeeServices.GetAllEmployees();
		this.StateHasChanged();
	}

	public async Task<string> GetDepartmentTitle(int depId)
	{
		DepartmentModel departmentData = await _depServices.GetDepartmentById(depId);

		if (departmentData != null)
		{
			Debug.WriteLine(departmentData.DepartmentName);
			return departmentData.DepartmentName;
		}
		else
		{
			Debug.WriteLine("Department not found");
			return "Department not found";
		}

	}

	public async Task<string> GetJobTitle(int jobId)
	{
		JobModel jobData = await _jobServices.GetJobById(jobId);

		if (jobData != null)
		{
			Debug.WriteLine(jobData.JobTitle);
			return jobData.JobTitle;
		}
		else
		{
			Debug.WriteLine("Job not found");
			return "Job not found";
		}
	}

	public void NavigateAddEmp()
	{
		navManager.NavigateTo("/adaugareangajat");
	}

	public void SearchHandler(ChangeEventArgs e)
	{
		search = e.Value.ToString();
		filteredEmployeeList = employeeList.Where(x => x.FirstName.ToLower().Contains(search.ToLower()) || x.LastName.ToLower().Contains(search.ToLower())).ToList();
		this.StateHasChanged();
	}
}


    




