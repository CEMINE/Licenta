@page "/adaugareangajat"
@using Licenta.Models
@using Licenta.Services
@using System.Data
@using System.Diagnostics
@using System.IO
@inject DepartmentServices _departmentServices
@inject JobServices _jobServices
@inject EmployeeServices _employeeServices
@inject IDialogService DialogAlert
@inject NavigationManager navManager
@inject NotificationService notification

<div class="container container-fluid align-items-center justify-content-center">
    <div class="row">
        <div class="col justify-content-center" style="border:1px solid black">
            <h3 style="text-align:center;">AdaugaAngajat</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-2" style="border:1px solid black">
            <p>test</p>
        </div>
        <div class="col-8 d-flex align-items-center" style="border:1px solid black">
            <div class="date justify-content-center align-items-center" style="left:50%">
                <form class="mt-3" style="width:100%; margin-left:80%">
                    <div class="form-group">
                        <label for="nume">Nume</label>
                        <input @bind-value="@employee.LastName" style="width:20vw;" type="text" class="form-control" id="nume" aria-describedby="emailHelp" placeholder="Nume">
                        
                    </div>
                    <div class="form-group mt-2">
                        <label for="prenume">Prenume</label>
                        <input style="width:20vw;" @bind-value="@employee.FirstName" type="text" class="form-control" id="prenume" placeholder="Prenume">
                    </div>
                    <div class="form-group mt-2">
                        <label for="exampleFormControlSelect1">Departament</label>
                        <select class="form-control" id="exampleFormControlSelect1" @onchange="DepartmentHandler" style="width:20vw;">
                            @if(departmentList == null)
                            {
                              <div class="spinner">

                              </div>
                            }
                            else
                            {
                                foreach(DepartmentModel dep in departmentList)
                                {
                                    <option  value="@dep.DepartmentID">@dep.DepartmentName</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="form-group mt-2">
                        <label for="exampleFormControlSelect1">Job</label>
                        <select class="form-control" id="exampleFormControlSelect1" @onchange="JobHandler" style="width:20vw;">
                            @if (jobList == null)
                            {
                                <div class="spinner">
                                </div>
                            }
                            else
                            {
                                foreach (JobModel job in jobList)
                                {
                                    <option value="@job.JobID">@job.JobTitle</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="form-group mt-2">
                        <label for="salar">Salariu</label>
                        <input @bind-value="@salariu" type="text" class="form-control" id="salar" placeholder="$$$$$" style="width:20vw;">
                    </div>
                     

                <div class="mb-3 mt-2 form-group">
                        <label for="birthdate">Data nasterii</label>
                        <input class="form-control" name="birthdate" style="width:20vw;" TValue="@DateTime.Now" type="date" @bind-value="@birthDate" @bind-value:event="oninput" />
                </div>
                    <div class="mb-3 mt-2 form-group">
                        <label for="hiredate">Data angajarii</label>
                        <input class="form-control" name="hiredate" style="width:20vw;" TValue="DateTime" type="date" @bind-value="@hireDate" @bind-value:event="oninput" />
                    </div> 
                    <RadzenCard class="mt-3 mb-3" Style="width:20vw;">
                        <h6>Adauga CV</h6>
                        <InputFile OnChange="HandleFileChange" accept=".pdf" />
                    </RadzenCard>
                    <RadzenButton class="mb-3" Click=@AdaugareAngajat Text="Adauga angajat" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success"></RadzenButton>      
                    <br />
                    <RadzenButton Click=Test></RadzenButton>
                </form>
            </div>
        </div>
        <div class="col-2" style="border:1px solid black">
            <p>test</p>
        </div>
    </div>
    <div class="row">
    </div>
</div>



@code {
    EmployeeModel employee = new EmployeeModel();
    List<DepartmentModel> departmentList;
    List<JobModel> jobList;
    DateTime birthDate = DateTime.Now;
    DateTime hireDate = DateTime.Now;
    double salariu = 0;
    int depId = 1;
    int jobId = 1;
    string fileName;
    long? fileSize;
    string cvPath;
    IBrowserFile cvFile;
    bool shouldCopyPdf = false;
    // string RunningPath;

    protected override async Task OnInitializedAsync()
    {
        employee.DepartmentID = 1;
        employee.JobID = 1;
        departmentList = await _departmentServices.GetAllDepartments();
        jobList = await _jobServices.GetAllJobs();


    }

    async Task PutTaskDelay()
    {
        await Task.Delay(2000);
    }

    public async void AdaugareAngajat()
    {
        if(employee.FirstName == null)
        {
            notification.Notify(NotificationSeverity.Error, "Eroare!", "Trebuie sa completat numele angajatului!", 3000);
            return;
        }

        if (employee.LastName == null)
        {
            notification.Notify(NotificationSeverity.Error, "Eroare!", "Trebuie sa completat prenumele angajatului!", 3000);
            return;
        }

        if (salariu == 0)
        {
            notification.Notify(NotificationSeverity.Error, "Eroare!", "Trebuie sa introduceti salariul!", 3000);
            Debug.WriteLine($"salariu {salariu}");
            return;
        }

        if(hireDate.Date == birthDate.Date)
        {
            notification.Notify(NotificationSeverity.Error, "Eroare!", "Data de nastere nu poate sa fie aceeasi ca data de angajare", 3000);
            return;
        }

        if(birthDate.Date > DateTime.Now.Date)
        {
            notification.Notify(NotificationSeverity.Error, "Eroare!", "Data de nastere introdusa nu poate sa fie din viitor!", 3000);
            return;
        }

        if (hireDate.Date > DateTime.Now.Date)
        {
            notification.Notify(NotificationSeverity.Error, "Eroare!", "Data de angajare introdusa nu poate sa fie din viitor!", 3000);
            return;
        }

        if(String.IsNullOrEmpty(cvPath))
        {
            notification.Notify(NotificationSeverity.Error, "Eroare!", "Trebuie sa selectezi CV-ul angajatului!", 3000);
            return;
        }

        if(!String.IsNullOrEmpty(cvPath))
        {
            shouldCopyPdf = true;
        }

        Debug.WriteLine($"salariu {salariu}");
        employee.HireDate = hireDate;
        employee.BirthDate = birthDate;
        employee.JobID = jobId;
        employee.DepartmentID = depId;
        employee.Salary = salariu;
        await CopyPdfFile(cvFile);
        employee.CVPath = cvPath;
        await _employeeServices.AddEmployee(employee);
        notification.Notify(NotificationSeverity.Success, "Succes!", "Angajatul a fost adaugat cu succes!", 3000);
        await PutTaskDelay();
        navManager.NavigateTo("/listaemp");

    }

    public void DepartmentHandler(ChangeEventArgs e)
    {
        depId = Convert.ToInt32(e.Value);
    }

    public void JobHandler(ChangeEventArgs e)
    {
        jobId = Convert.ToInt32(e.Value);
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        cvFile = e.File;
        Debug.WriteLine("Merge");
        if (cvFile.ContentType == "application/pdf")
        {

            await CopyPdfFile(cvFile);
            Debug.WriteLine($"Apel catre CopyPdfFile");
        }
        else
        {
            notification.Notify(NotificationSeverity.Error, "Eroare!", "Fisierul selectat trebuie sa fie de tip .PDF !", 3000);
            Debug.WriteLine("Eroare handlefilechange");
        }
    }

    private async Task CopyPdfFile(IBrowserFile file)
    {
        var appDataFolder = AppDomain.CurrentDomain.BaseDirectory;
        var folderPath = Path.Combine(appDataFolder, "res", "cv");
        Debug.WriteLine($"Folder path {folderPath}");

        Directory.CreateDirectory(folderPath);

        var fileName = file.Name;
        var filePath = Path.Combine(folderPath, fileName);
        cvPath = filePath;
        Debug.WriteLine($"cvpath {cvPath}");
        if(shouldCopyPdf)
        {


            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(fileStream);

                Debug.WriteLine($"fisier copiat la {filePath}");
            }
        }      
    }

}




