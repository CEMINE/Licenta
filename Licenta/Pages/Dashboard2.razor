@page "/dashboard2"
@using Licenta.Models
@using Licenta.Services
@using System.Diagnostics
@inject DepartmentServices _departmentServices
@inject EmployeeServices _employeeServices
@inject EmployeeProjectServices _employeeProjectServices

@if (departmentList == null || empList == null)
{
    <div class="spinner"></div>
}
else
{
    <div class="buttons">
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap" class="mb-3">
            <RadzenButton Text="Total angajati/departament" ButtonStyle="ButtonStyle.Primary" class="rz-border-radius-6" Click=@Test />
            <RadzenButton Text="Total angajati/departament" ButtonStyle="ButtonStyle.Primary" class="rz-border-radius-6" />
            <RadzenButton Text="Total angajati/departament" ButtonStyle="ButtonStyle.Primary" class="rz-border-radius-6"/>
            <RadzenButton Text="Total angajati/departament" ButtonStyle="ButtonStyle.Primary" class="rz-border-radius-6" />
            <RadzenButton Text="Total angajati/departament" ButtonStyle="ButtonStyle.Primary" class="rz-border-radius-6" />

        </RadzenStack>

    </div>
    <div>
        <ApexChart TItem="DataTest"
                   Title="Total angajati pe fiecare departament" >

            <ApexPointSeries TItem="DataTest"
                             Items="test"
                             Name="Angajati"
                             SeriesType="SeriesType.Bar"
                             XValue="e => e.Departament"
                             YValue="e => e.NrAngajati" />

        </ApexChart>
    </div>
    <div>
        <ApexChart TItem="AngajatiProiecteMultiple"
                   Title="Total angajati pe proiecte" >

            <ApexPointSeries TItem="AngajatiProiecteMultiple"
                             Items="angajatiProiecteMultipleList"
                             Name="Angajati"
                             SeriesType="SeriesType.Bar"
                             XValue="e => e.NrProiecte"
                             YValue="e => e.NrAngajati"
                             OrderByDescending="e=> e.Y" 
                             ShowDataLabels/>



        </ApexChart>
    </div>
    <div>
        <ApexChart TItem="AngajatiVarsta"
                   Title="Total angajati pe intervale de varsta" Width="700" Height="700">

            <ApexPointSeries TItem="AngajatiVarsta"
                             Items="angajatiVarstaList"
                             Name="Ceva"
                             SeriesType="SeriesType.Pie"
                             XValue="e => e.Varsta"
                             YValue="e => e.NrAngajati"
                             ShowDataLabels />


        </ApexChart>
    </div>
    <div>
        <ApexChart TItem="MyData"
                   Title="Sample Data">

            <ApexPointSeries TItem="MyData"
                             Items="Data"
                             Name="Net Profit"
                             SeriesType="SeriesType.Bar"
                             XValue="e => e.Category"
                             YValue="e=> e.NetProfit" />

            <ApexPointSeries TItem="MyData"
                             Items="Data"
                             Name="Revenue"
                             SeriesType="SeriesType.Bar"
                             XValue="e => e.Category"
                             YValue="e=> e.Revenue" />
        </ApexChart>
    </div>
}

@code {
    private List<MyData> Data { get; set; } = new();
    private List<DataTest> test { get; set; } = new();
    private List<AngajatiProiecteMultiple> angajatiProiecteMultipleList { get; set; } = new();
    private List<AngajatiVarsta> angajatiVarstaList { get; set; } = new();
    List<DepartmentModel> departmentList;
    List<EmployeeModel> empList;
    List<EmployeeProjectModel> empProjectList;
    bool isHidden = true;

    public void Test()
    {
        isHidden = !isHidden;
    }



    protected async override void OnInitialized()
    {

        departmentList = await this._departmentServices.GetAllDepartments();
        empList = await this._employeeServices.GetAllEmployees();
        empProjectList = await this._employeeProjectServices.GetAllEmployeesProjects();
        Data.Add(new MyData { Category = "Jan", NetProfit = 12, Revenue = 33 });
        Data.Add(new MyData { Category = "Feb", NetProfit = 43, Revenue = 42 });
        Data.Add(new MyData { Category = "Mar", NetProfit = 112, Revenue = 23 });

        if (departmentList != null)
        {
            foreach (var item in departmentList)
            {
                test.Add(new DataTest { NrAngajati = empList.Where(x => x.DepartmentID == item.DepartmentID).Distinct().Count(), Departament = item.DepartmentName });

            }

        }
        if(empProjectList != null)
        {
            FilterByEmpNumberAndProjectCount();
        }
        if(empList != null)
        {
            FilterByNumberAndAge();
        }
        this.StateHasChanged();
    }

    public void FilterByNumberAndAge()
    {
        var ageSectors = empList.Select(emp => emp.Age / 5 * 5) // Group by age sectors of 5
                                .Distinct() // Ensure unique age sectors
                                .OrderBy(age => age); // Order the age sectors

        // Query to count employees in each age sector
        var result = ageSectors.Select(minAge => new
        {
            MinAge = minAge,
            MaxAge = minAge + 5,
            EmployeeCount = empList.Count(emp => emp.Age >= minAge && emp.Age <= minAge + 5)
        });

        // Print the result
        foreach (var sector in result)
        {
            angajatiVarstaList.Add(new AngajatiVarsta
            {
                NrAngajati = sector.EmployeeCount,
                Varsta = $"{sector.MinAge} - {sector.MaxAge}"
                
            });
        }
    }

    public void FilterByEmpNumberAndProjectCount()
    {
        var groupedEmployees = empProjectList.GroupBy(e => e.EmployeeId)
                                             .Select(g => new { EmployeeId = g.Key, NumberOfProjects = g.Count() });

        // Group the above result by the number of projects to get counts
        var result = groupedEmployees.GroupBy(g => g.NumberOfProjects)
                                     .Select(g => new { NumberOfProjects = g.Key, EmployeeCount = g.Count() });
        foreach (var item in result)
        {

            angajatiProiecteMultipleList.Add(new AngajatiProiecteMultiple
                {
                    NrAngajati = item.EmployeeCount,
                    NrProiecte = $"{item.NumberOfProjects} proiect(e)", 
                });
        }
    }



    public class MyData
    {
        public string Category { get; set; }
        public int NetProfit { get; set; }
        public int Revenue { get; set; }
    }

    public class DataTest
    {
        public int NrAngajati { get; set; }
        public string Departament { get; set; }
    }

    public class AngajatiProiecteMultiple
    {
        public int NrAngajati { get; set; }
        public string NrProiecte { get; set; }
    }

    public class AngajatiVarsta
    {
        public int NrAngajati { get; set; }
        public string Varsta { get; set; }
    }
}