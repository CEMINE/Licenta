@page "/adaugaproiect"
@using Licenta.Models
@using Licenta.Services
@inject ProjectServices _projectServices
@inject NotificationService notification
@inject NavigationManager _navManager


<div class="row">
    <div class="col-12" style="border: 1px solid black;">
        <h1 style="text-align:center;">Adauga proiect</h1>
    </div>
</div>
<div class="row">
    <div class="col-2" style="border: 1px solid black;">
        <p>test</p>
    </div>
    <div class="col-8" style="border: 1px solid black;">
        <div class="wrapper">
            <form class="mt-3" style="margin-left:31%;">
                <div class="form-group">
                    <label for="nume">Nume proiect</label>
                    <input  style="width:20vw" type="text" class="form-control" id="nume" aria-describedby="emailHelp" placeholder="Nume proiect" @bind-value="@projectName">
                </div>
                <div class="form-group">
                    <div class="mb-3 mt-2 form-group">
                        <label for="startDate">Data incepere proiect</label>
                        <input class="form-control" name="startDate" style="width:20vw;" TValue="@DateTime.Now" type="date" @bind-value="@startDate" @bind-value:event="oninput" />
                    </div>
                </div>
                <div class="form-group">
                    <div class="mb-3 mt-2 form-group">
                        <label for="endDate">Data finalizare proiect</label>
                        <input class="form-control" name="endDate" style="width:20vw;" TValue="@DateTime.Now" type="date" @bind-value="@endDate" @bind-value:event="oninput" />
                    </div>
                </div>
                <RadzenButton Click=@AddProject Text="Adauga proiect" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" ></RadzenButton>
            </form>
        </div>
    </div>
    <div class="col-2" style="border: 1px solid black;">
        <p>test</p>
    </div>
</div>

@code {
    IEnumerable<ProjectModel> projectList;
    DateTime startDate = DateTime.Now;
    DateTime endDate = DateTime.Now;
    string projectName;
    protected override async Task OnInitializedAsync()
    {
        projectList = await this._projectServices.GetAllProjects();
    }

    async Task PutTaskDelay()
    {
        await Task.Delay(2000);
    }

    public async void AddProject(){
        if(projectName == null || projectName == "")
        {
            notification.Notify(NotificationSeverity.Error, "Eroare", $"Trebuie sa completati numele proiectului", 3000);
            return;
        }
        if(startDate.Date == endDate.Date)
        {
            notification.Notify(NotificationSeverity.Error, "Eroare", $"Data de inceput a proiectului nu poate sa fie aceeasi cu cea de finalizare", 3000);
            return;
        }
        ProjectModel proj = new ProjectModel();
        proj.ProjectName = projectName;
        proj.StartDate = startDate;
        proj.EndDate = endDate;
        await this._projectServices.AddProject(proj);
        notification.Notify(NotificationSeverity.Success, "Succes!", "Proiectul a fost adaugat cu succes!", 3000);
        await PutTaskDelay();
        _navManager.NavigateTo("/listaproiecte");

    }
}                            